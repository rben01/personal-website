= Indenting with Tabs and Spaces
:basedir: ../..
include::../blog.asciidoc[]
:stylesheet: mixing-whitespace.css
:docdate: 2021-07-20
:description: The correct way to indent is using both tabs and spaces
:toc: left
:cursor: ùö∞
:experimental:
:tk: kbd:[Tab]
:sk: kbd:[Space]
:tc: pass:q[`&lt;TAB&gt;`]
:sc: pass:q[`&lt;SPACE&gt;`]
:tab-l: ‚îú
:tab-r: ‚î§
:tab-m: ‚ïå
:tabstop: ‚§ì
:tab-i: ¬∑
:tabstop-1: pass:q,a[[.tabstop]##{tabstop}##]
:tabstop-2: pass:q,a[[.tabstop]##{tab-i}{tabstop}##]
:tabstop-4: pass:q,a[[.tabstop]##{tab-i}{tab-i}{tab-i}{tabstop}##]
:tabstop-6: pass:q,a[[.tabstop]##{tab-i}{tab-i}{tab-i}{tab-i}{tab-i}{tabstop}##]
:tabstop-8: pass:q,a[[.tabstop]##{tab-i}{tab-i}{tab-i}{tab-i}{tab-i}{tab-i}{tab-i}{tabstop}##]
:tabstop-16: pass:q,a[[.tabstop]##{tab-i}{tab-i}{tab-i}{tab-i}{tab-i}{tab-i}{tab-i}{tab-i}{tab-i}{tab-i}{tab-i}{tab-i}{tab-i}{tab-i}{tab-i}{tabstop}##]
:tab-m-code: pass:q,a[[.tabstop]##{tab-m}##]
:tab-1: ‚ïë
:tab-1-code: pass:q,a[[.tabstop]##{tab-1}##]
:tab-2: pass:q,a[[.tabstop]##{tab-l}{tab-r}##]
:tab-3: pass:q,a[[.tabstop]##{tab-l}{tab-m}{tab-r}##]
:tab-4: pass:q,a[[.tabstop]##{tab-l}{tab-m}{tab-m}{tab-r}##]
:tab-5: pass:q,a[[.tabstop]##{tab-l}{tab-m}{tab-m}{tab-m}{tab-r}##]
:tab-6: pass:q,a[[.tabstop]##{tab-l}{tab-m}{tab-m}{tab-m}{tab-m}{tab-r}##]
:tab-7: pass:q,a[[.tabstop]##{tab-l}{tab-m}{tab-m}{tab-m}{tab-m}{tab-m}{tab-r}##]
:tab-8: pass:q,a[[.tabstop]##{tab-l}{tab-m}{tab-m}{tab-m}{tab-m}{tab-m}{tab-m}{tab-r}##]
:tab-16: pass:q,a[[.tabstop]##{tab-l}{tab-m}{tab-m}{tab-m}{tab-m}{tab-m}{tab-m}{tab-m}{tab-m}{tab-m}{tab-m}{tab-m}{tab-m}{tab-m}{tab-m}{tab-r}##]
:space-char: ‚ê£
:space-char-code: pass:q,a[[.tabstop]##{space-char}##]
:code-tabstop-example-subs: "quotes,attributes"

The oft-repeated "`don't mix tabs and spaces`" is wrong.

In this article, I'll explore what programmers use indentation for, the advantages and disadvantages of indenting with tabs or spaces alone, and why mixing them is the best, if not objectively correct, way to indent.
I am certainly not the first to make this claim, and I'm sure I won't be the last.
But this point is far from moot; link:https://pep8.org/#indentation[many], link:https://google.github.io/styleguide/jsguide.html#formatting-block-indentation[__many__], link:https://github.com/rust-dev-tools/fmt-rfcs/blob/master/guide/guide.md[__**many**__], link:https://github.com/rubocop/ruby-style-guide[__**MANY**__] people still advocate using a fixed number of spaces.
This article will show why they are wrong.


== Indentation: The Basics

=== The Two Goals of Indentation

Unless you're using a language with whitespace-based syntax -- the most notorious example of which is Python -- your code will run just fine no matter how it's indented.
So why indent at all?
When writing code, indentation is used to accomplish two goals:

. It makes the structure of your code, as a computer would see it, clear to a human as well; when code is indented correctly, the hierarchical relation between statements and scopes is visible on the screen.
This way, you and the computer agree on the structure of the code.
We will refer to indentation used this way as _semantic_ indentation.
. It is used for typesetting/alignment.
This is most useful when when items that are part of a single statement have to be displayed over multiple lines and you wish to horizontally align the lower items with the first item.
We will refer to indentation used this way as _aesthetic_ indentation.
+
Below is an example of this kind of indentation with two equivalent styles shown.
All examples in this article will be in JavaScript, but the principles apply to every language.footnote:[
Even if you are using a language whose link:https://gvanrossum.github.io[dictator] has decreed that you must use spaces for indentation, the _logic_ still applies.
If you are using such a language, you have my condolences.]
+
====
[source,javascript,linenums]
.Style 1: operators at the start of the line
--
if (superLongConditionNumber1
    && superLongConditionNumber2
    && superLongConditionNumber3)
{
    /* Do stuff */
}
--
[source,javascript,linenums]
.Style 2: operators at the end of the line
--
if (superLongConditionNumber1 &&
    superLongConditionNumber2 &&
    superLongConditionNumber3)
{
    /* Do stuff */
}
--
In both styles{zwsp}footnote:[
I personally find Style 2 easier to read, but Style 1 brings more attention to the operators, so it's a toss-up.
In any case, the specifics of how you align your code aren't important as long as you do so consistently.
], the conditions in the `if` statement are all aligned to the same column, column 4.
====
+
When everything is in the same place on each line, the code becomes much easier to parse quickly; it's almost like you're looking at a _table_ of text instead of _lines_ of text.


So, what happens when you need to mix both styles of indentation? What happens when, on a single line, you need to use both _semantic_ indentation and _aesthetic_ indentation? Can this situation even occur naturally? (Yes.) Before we talk about that, we should discuss what indentation actually _is_.

=== A Brief History of the Tab Key

The tab key, {tk}, can trace its history back to the link:https://en.wikipedia.org/wiki/Tab_stop[tab stop] on typewriters.
On a typewriter, tab stops were used to create fixed horizontal positions for the carriage (the part that holds the paper and moves horizontally as you type) to travel to.
This was useful when typing tabular data -- hence the name _tab stop_ -- as once you had placed tab stops at the start of each of the table's columns, you could quickly advance from one column to the next by pressing the {tk} key.footnote:[
Most, if not all, spreadsheet applications still use {tk} to move to the next cell to the right.
If it ain't broke, don't fix it.]
This was faster and more reliable than pressing the space key as many times as necessary to advance to the next column.
(When you were done with the last column on the line, instead of pressing {tk} you would pull the link:https://en.wikipedia.org/wiki/Carriage_return#Typewriters[carriage return] lever to move to the next line and _return_ the carriage to the leftmost position.)
When computers began to replace typewriters, the {tk} key kept the same behavior: advancing to the next preset location on the line.
The question was: what is the right way to implement this behavior in a virtual text field?

// Some programs, such as word processors, still use {tk} to navigate between tab stops.footnote:[
// You can still activate them in Microsoft Word by clicking the ruler that sits above the document.]

=== The Tab Character

Wite-Out notwithstanding, typewritten text is a write-once format, so when advancing the carriage there was no difference between using tab stops and repeatedly pressing the space bar; tab stops just made advancing the carriage more  consistent and convenient.
But computers allow text to be edited (duh), so when people started using them, the question of how should a computer store the fact that the {tk} key was pressed needed to be settled.
Should it simulate pressing space enough times to move over to the next virtual tab stop -- say, some multiple of eight characters from the start of the line?footnote:[
Assuming that you're using a monospace font so that characters other than {tc} all have the same width; none of this applies to variable-width fonts.]
Well, if spaces were inserted, then if any edits were made to the previous text on the line, subsequent tab stops would become misaligned and the user would have to manually correct the number of spaces inserted.
This wouldn't do; computers are supposed to automate this kind of boring work for us.
Instead, the answer was the tab character, link:https://unicode-table.com/en/0009/[`U+0009`], often represented in source code as `\t`.
Throughout this article, I will refer to this character as {tc}.footnote:[
While many "`smart`" editors will not blindly insert {tc} when {tk} is pressed -- {tk} is just another key, and they're free to respond to it how they want -- most "`dumb`" editors like Apple's TextEdit and Microsoft's Notepad will.
If your editor doesn't insert the {tc} character when you press {tk}, you might be able to force it to insert {tc} by pressing kbd:[Ctrl+I]
]

=== Virtual Tab Stops

[example]
--
Throughout this article, within code blocks, `[.tabstop]##{tabstop}##` will represent tab stops, `[.tabstop]##{tab-i}##` will represent space between tab stops, `[.tabstop]##{tab-l}{tab-m}{tab-r}##` will represent a tab character (of variable width), and `[.tabstop]##{space-char}##` will represent a single space character.
Due to this representation of the {tc} character, we will have to represent tabs of width 1 as `[.tabstop]##{tab-1}##`, and tabs of width 0 as single line behind the previous character, e.g., `[.lies-on-tab-char]##a##`.
--

The beauty of the {tc} character, as opposed to using several spaces, is that the computer can dynamically set its width so that it always appears to fill the horizontal space to the next _virtual_ tab stop.
When text to the left of a {tc} character is edited, the computer can immediately resize the {tc} character on the fly so that it is always flush with a tab stop.
For instance, if tab stops are set to multiples of eight characters, then the following shows how tabs will expand.



[source,text,subs={code-tabstop-example-subs}]
--
{tabstop-8}{tabstop-8}
{tab-8}{tab-8}
a{tab-7}{tab-8}
ab{tab-6}x{tab-7}
abc{tab-5}xy{tab-6}
abcd{tab-4}xyz{tab-5}
--

In this example, we chose a tab width of eight characters.
This decision was arbitrary; let's see what happens if we'd instead chosen a tab width of four characters.

[source,text,subs={code-tabstop-example-subs}]
--
{tabstop-4}{tabstop-4}
{tab-4}{tab-4}
a{tab-3}{tab-4}
ab{tab-2}x{tab-3}
abc{tab-1-code}xy{tab-2}
abc[.lies-on-tab-char]##d##xyz{tab-1-code}
--



Looks good!
What about a width of two characters?

[source,text,subs={code-tabstop-example-subs}]
--
{tabstop-2}{tabstop-2}{tabstop-2}{tabstop-2}
{tab-2}{tab-2}
a{tab-1-code}{tab-2}
a[.lies-on-tab-char]##b##x{tab-1-code}
abc{tab-1-code}x[.lies-on-tab-char]##y##
abc[.lies-on-tab-char]##d##xyz{tab-1-code}
--


Whoops!
Our tab stops weren't wide enough, so things got misaligned.
But as long as the tab stop width is at least the width of the widest column of text of text entered within a "`column`", everything works out.

So, how wide _should_ tab stops be?
Eight characters?
Four?
Two?
(_One?_)
It depends on how wide you expect your columns of text to be.


But when indenting code, there is by definition no text within the indentation; it's all whitespace.
There are no columns!
This means that the consideration of how wide to make the tab stops that comprise the indentation in your editor is *immaterial*.
It is completely up to your personal preference. Which of the following styles do you prefer?

[source,javascript]
--
function f() {
        if (foo) {
                bar()
        }
}
--

[source,javascript]
--
function f() {
    if (foo) {
        bar()
    }
}
--

You could have picked either one; it truly doesn't matter, as there is nothing that _could_ become misaligned.
// If you use {tc} to indent, you can just tell your editor how wide it should display tabs, and it will look how _you_ prefer.


== Camp 1: Only Tabs

=== Tabs for Semantic Indentation

Alice and Bob are working on the same codebase.
Having read the above, they decide that from here on out, they will only use {tc} to indent their code.
That way they can each read each other's code with the indent width that they prefer.

// TODO: figure out how to get syntax highlighting to work on text that's not syntactically valid
:indent: {tab-8}
:ts: {tabstop-8}
[source,subs="attributes"]
--
{ts}{ts}
<span class="tok-cm">// Alice prefers a tab width of 8</span>
<span class="tok-kd">function</span> f() {
{indent}<span class="tok-k">if</span> (foo) {
{indent}{indent}bar()
{indent}}
}
--

:indent: {tab-4}
:ts: {tabstop-4}
[source,subs="attributes"]
--
{ts}{ts}
<span class="tok-cm">// Bob prefers a tab width of 4</span>
<span class="tok-kd">function</span> f() {
{indent}<span class="tok-k">if</span> (foo) {
{indent}{indent}bar()
{indent}}
}
--

Looks great!
Crucially, these two code snippets have the same underlying representation -- they are byte-for-byte-equal.
Yet when Alice and Bob open this file on their own computer, they each get to see the code how _they_ prefer.
Same file, different appearance -- that's the magic of the tab character.

=== Tabs for Aesthetic Indentation

Unfortunately, Alice and Bob run into a little bit of a wrinkle. Bob checks in the following code:

:indent: {tab-4}
:ts: {tabstop-4}
[source,subs="attributes"]
--
{ts}{ts}
<span class="tok-kd">function</span> f() {
{indent}<span class="tok-k">if</span> (superLongConditionNumber1
{indent}{indent}<span class="tok-o">&&</span> superLongConditionNumber2
{indent}{indent}<span class="tok-o">&&</span> superLongConditionNumber3)
{indent}{
{indent}{indent}<span class="tok-cm">/* Do stuff */</span>
{indent}}
}
--

He is proud of how nicely aligned his code is; having the three condition lines aligned inside the ``if``'s parentheses looks great.
But soon afterward, Alice complains to him about how _poorly_ aligned his code is.
Bob is confused -- the code looked great on his computer.
But when he views his code on Alice's computer, he sees the issue:

:indent: {tab-8}
:ts: {tabstop-8}
[source,subs="attributes"]
--
{ts}{ts}
<span class="tok-kd">function</span> f() {
{indent}<span class="tok-k">if</span> (superLongConditionNumber1
{indent}{indent}<span class="tok-o">&&</span> superLongConditionNumber2
{indent}{indent}<span class="tok-o">&&</span> superLongConditionNumber3)
{indent}{
{indent}{indent}<span class="tok-cm">/* Do stuff */</span>
{indent}}
}
--

Whoops!
The `if` statements conditions lines aren't aligned anymore.
Unfortunately, Bob had meant to push over those condition lines by four characters, but he used {tc}s to do it, and so the alignment he was so proud of only existed when using {tc}s of width four.

== Camp 2: Only Spaces

=== Spaces for Aesthetic Indentation

Alice's and Bob's coworker Simplicio{zwsp}footnote:[https://en.wikipedia.org/wiki/Dialogue_Concerning_the_Two_Chief_World_Systems] watches this unfold from a distance.
He offers them a solution to their problem: "`Just use spaces!`".
Alice and Bob look at each other reluctantly, but Simplicio insists that Alice and Bob open his version of the file, shown below, on their computers.

:scc: {space-char-code}
:indent: {scc}{scc}{scc}{scc}{scc}{scc}
:ts: {tabstop-6}
[source,subs="attributes"]
--
{ts}{ts}
<span class="tok-kd">function</span> f() {
{indent}<span class="tok-k">if</span> (superLongConditionNumber1
{indent}{scc}{scc}{scc}{scc}<span class="tok-o">&&</span> superLongConditionNumber2
{indent}{scc}{scc}{scc}{scc}<span class="tok-o">&&</span> superLongConditionNumber3)
{indent}{
{indent}{indent}<span class="tok-cm">/* Do stuff */</span>
{indent}}
}
--

They all agree that no matter whose computer they viewed Simplicio's version on, it looks the same.
Reluctantly, Bob admits that this does fix his alignment problem.
But Alice isn't so sure about Simplicio's solution.

=== Spaces for Semantic Indentation

[quote]
--
"`Wait`", Alice said, "`this won't do.`" +
"`The code is aligned, is it not?`", asked Simplicio. +
"`Yes, but Bob and I are stuck with your ugly indentation! I like _my_ indentation to be _eight_ characters, and Bob likes _his_ to be _four_.`" +
"`I'm sorry`", says Simplicio, "`but I just don't see another way to solve this problem. If you want your code to be aligned, you'll just need to indent with spaces, your preferences be damned.`"
--

Sure enough, if they were to continue to use spaces for indentation, they would not each be able to use the indentation width they preferred.
It seemed that Simplicio's "`solution`" had merely traded one problem for another.

== Camp 0: (Responsibly) Mixing Tabs and Spaces

[quote]
--
"`Eureka!`", cries Alice.
"`I know the solution to this problem. I know how we can each use the indentation width we prefer while keeping our code nicely aligned!`" +
"`Impossible`", retorts Simplicio. +
"`Let's hear her out`", says Bob.
--

Her solution?
Use the two kinds of whitespace characters where they each excel.

{tc} for Semantic Indentation...::
Because the {tc} character is flexible, it is perfect for semantic indentation.
Its width can be set by each user individually, and so they'll all view the same file the way they each prefer.

And {sc} for Aesthetic Indentation::
Because the {sc} character is __in__flexible, it is perfect for aesthetic indentation.
Its width never changes, so the amount of space it adds to aligned text remains the same regardless of who is looking at the file.

To test her solution, Alice rewrites the file as such:

:scc: {space-char-code}
:indent: {tab-8}
:ts: {tabstop-8}
[source,subs="attributes"]
--
{ts}{ts}
<span class="tok-kd">function</span> f() {
{indent}<span class="tok-k">if</span> (superLongConditionNumber1
{indent}{scc}{scc}{scc}{scc}<span class="tok-o">&&</span> superLongConditionNumber2
{indent}{scc}{scc}{scc}{scc}<span class="tok-o">&&</span> superLongConditionNumber3)
{indent}{
{indent}{indent}<span class="tok-cm">/* Do stuff */</span>
{indent}}
}
--

When Bob opens it on his computer, he sees this:

:scc: {space-char-code}
:indent: {tab-4}
:ts: {tabstop-4}
[source,subs="attributes"]
--
{ts}{ts}
<span class="tok-kd">function</span> f() {
{indent}<span class="tok-k">if</span> (superLongConditionNumber1
{indent}{scc}{scc}{scc}{scc}<span class="tok-o">&&</span> superLongConditionNumber2
{indent}{scc}{scc}{scc}{scc}<span class="tok-o">&&</span> superLongConditionNumber3)
{indent}{
{indent}{indent}<span class="tok-cm">/* Do stuff */</span>
{indent}}
}
--

It looks like her solution works!
Out of spite, Simplicio sets his {tc} width to 16.
Surely Alice's solution won't work then?
To his dismay, it does:

:scc: {space-char-code}
:indent: {tab-16}
:ts: {tabstop-16}
[source,subs="attributes"]
--
{ts}{ts}
<span class="tok-kd">function</span> f() {
{indent}<span class="tok-k">if</span> (superLongConditionNumber1
{indent}{scc}{scc}{scc}{scc}<span class="tok-o">&&</span> superLongConditionNumber2
{indent}{scc}{scc}{scc}{scc}<span class="tok-o">&&</span> superLongConditionNumber3)
{indent}{
{indent}{indent}<span class="tok-cm">/* Do stuff */</span>
{indent}}
}
--


Finally, in a vain attempt to outsmart Alice's solution, Simplicio tries setting his {tc} width to 1:


:scc: {space-char-code}
:indent: {tab-1-code}
:ts: {tabstop-1}
[source,subs="attributes"]
--
{ts}{ts}
<span class="tok-kd">function</span> f() {
{indent}<span class="tok-k">if</span> (superLongConditionNumber1
{indent}{scc}{scc}{scc}{scc}<span class="tok-o">&&</span> superLongConditionNumber2
{indent}{scc}{scc}{scc}{scc}<span class="tok-o">&&</span> superLongConditionNumber3)
{indent}{
{indent}{indent}<span class="tok-cm">/* Do stuff */</span>
{indent}}
}
--

Unsurprisingly, Alice's solution survives this attack, too.

Reluctantly, Simplicio concedes that using {tc} for semantic indentation and {sc} for aesthetic indentation is the best option after all; it's the only way to allow Alice, Bob, and anyone else (even Simplicio) to each have the indentation width they prefer without losing the ability to keep code nicely aligned.


== Editing in Practice

So, now that we know the right way to indent our code, how can we actually achieve this style of indentation?

=== The Very Dumb Way

Don't!
Just give up!
Accept that the problem is too hard to solve, settle on only tabs or only spaces, and move on.
This is what Python did from the outset{zwsp}footnote:[
Python's link:https://www.python.org/dev/peps/pep-0008/#indentation[PEP 8] simply says "`Use 4 spaces per indentation level`".
It does not state why this is optimal.], and it doesn't seem to have hurt it much.
In general, imposing your will on others without regard for their individual preferences is the simplest way to get what you want.
Who cares if people whose preferences differ from your own aren't happy with your decision?
That's _their_ problem.

=== The Dumb Way

The "`dumb`" way is to manually indent your own code.
When you want to increase the scope depth, press {tk} (and make sure your editor is set to insert {tc} when you do so!).
When you want to align some code, press {sk} as many times as necessary.
A bit inconvenient, but it will work just fine.
Just make sure not to accidentally tell your editor to convert all indentation to tabs or spaces, as that will undo all your hard work.

=== The Smart Way

For every programming language, there is almost certainly _some_ auto-formatter that will nicely format its code for you.
Many languages have several.
Here are some examples:

Python::
* link:https://github.com/psf/black[black]
* link:https://github.com/hhatto/autopep8[autopep8]
* link:https://github.com/google/yapf[yapf]

JavaScript::
* link:https://prettier.io[Prettier]
* link:https://www.npmjs.com/package/js-beautify[Beautify]
* link:https://standardjs.com[JavaScript Standard Style]

Others::
+
[horizontal.table-row]
Go::: link:https://pkg.go.dev/cmd/gofmt[gofmt]
Rust::: link:https://github.com/rust-lang/rustfmt[rustfmt]
Ruby::: link:https://github.com/rubocop/rubocop[RuboCop]
Java::: link:https://github.com/google/google-java-format[google-java-format]

[sidebar]
--
If this is your first time hearing about auto-formatters, stop reading this article and go install one for a language you work in.
You'll never manually format your code again (which you shouldn't -- tedium is for computers, not humans).
--

Unfortunately, gofmt is the only formatter on this list that indents with tabs and spaces by default.
Rustfmt has the (non-default) option `hard_tabs = true` to use the correct behavior as well.
So chances are that if you want to use an autoformatter to format your code, you'll need to either format your code the dumb way, submit a bug report on the auto-formatter's repo, or, preferably, submit a pull request that implements this behavior.
If you're lazy, though, you can just post an article online and hope that enough people read it and agree with it that the idea of mixing tabs and spaces becomes mainstream.

=== Other Practical Considerations

Thus far, we've been focused primarily on the fact that mixed indentation lets programmers express their indentation width preferences while keeping things tidy.
But indenting with both {tc}s and {sc}s has other advantages as well:

* Some editors have "`smart`" behavior that allows them to treat multiple spaces as a single tab stop.
Sometimes this takes configuring and varies on a per language/filetype basis.
And can you guarantee that you'll always be using your editor of choice?
(If you've never had to SSH into a server where the only editor was a config-less Vim, consider yourself lucky.)
If you use {tc}s for semantic indentation, everything will just work out of the box.
* If your cursor is within {tc}-based indentation, the left and right arrow keys are guaranteed to navigate between tab stops; it's impossible to move just part of the way to the next tab stop.
This lets you move between tab stops more quickly (regardless of any editor settings).
It also prevents your cursor from ever being located between tab stops, which would serve no purpose -- if it's between tab stops, the only useful thing for it to do is move somewhere else first.
* If your cursor is within {tc}-based indentation and you attempt to delete a single indent, you... successfully delete that indent.
(Amazing!)
If you are using {sc}-based indentation, though, a number of things could happen, depending on your editor's settings:
+
--
** You might delete a tab stop's worth of spaces
** You might delete just a single space
** If your cursor is not at a tab stop, you might delete back to the previous tab stop, which will be less than a full tab stop away.
--
+
Why deal with this when there's a character that was _made_ to indent just begging to be used?
* Depending on how many {sc}s one uses to simulate a {tc}, {tc}s can take up quite a bit less space in a file.
If you could shrink the sizes of all your files by 5% for no cost, wouldn't you?


== Conclusion

When indenting, {tc}s and {sc}s serve different purposes.
Indentation works best when both {tc}s and {sc}s are used, the former for semantic indentation and the latter for aesthetic indentation.
Indenting with a fixed number of spaces takes us back to the days of the typewriter, when nothing was virtual, everything was physical, and horizontal space was horizontal space was horizontal space, alignment was alignment was alignment.
We are in a more advanced age now and we don't need to tie semantics to aesthetics quite so strongly; we can make use of the virtual facilities provided by computers to write more comfortably, and in a more individualized manner, than was allowed by typewriters.

We listen to the music we like; we use the editors of our choosing; we use the syntax themes we like best; we assign keyboard shortcuts to the actions that make us most productive.
But when it comes to the width of our indentation, we are told to all march in lockstep, not due to any technological limitation, but for the sake of some misbegotten notion of "`consistency`".
Even Guido van Rossum, link:https://en.wikipedia.org/wiki/Benevolent_dictator_for_life[dictator of Python] and proponent of needless consistency,footnote:[
Where "`needless consistency`" can be taken to mean his own personal preferences.
Kudos to Mr. van Rossum for getting the world to adopt his personal preferences on code style as the "`right`" way to write one of the most popular programming languages in the world.
Shame on the world for bowing to the whims of a dictator, benevolent or otherwise.
] could acknowledge that link:https://pep8.org/#a-foolish-consistency-is-the-hobgoblin-of-little-minds["`A Foolish Consistency is the Hobgoblin of Little Minds`"].
I think it's high time that the rest of us do so as well.
